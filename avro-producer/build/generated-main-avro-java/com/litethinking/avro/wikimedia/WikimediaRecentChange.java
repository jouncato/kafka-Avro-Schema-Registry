/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.litethinking.avro.wikimedia;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Wikimedia Avro */
@org.apache.avro.specific.AvroGenerated
public class WikimediaRecentChange extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6321160790008619086L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WikimediaRecentChange\",\"namespace\":\"com.litethinking.avro.wikimedia\",\"doc\":\"Wikimedia Avro\",\"fields\":[{\"name\":\"event\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PartitionOffset\",\"fields\":[{\"name\":\"topic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"partition\",\"type\":\"int\"},{\"name\":\"offset\",\"type\":[\"long\",\"null\"],\"default\":0},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"],\"default\":0}]}}},{\"name\":\"data\",\"type\":{\"type\":\"record\",\"name\":\"ChangeData\",\"fields\":[{\"name\":\"schema_version\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"meta\",\"type\":{\"type\":\"record\",\"name\":\"Meta\",\"fields\":[{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"request_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"dt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"domain\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"stream\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"topic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"partition\",\"type\":\"int\"},{\"name\":\"offset\",\"type\":\"long\"}]}},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"namespace\",\"type\":\"int\"},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"title_url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"comment\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"user\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bot\",\"type\":\"boolean\"},{\"name\":\"notify_url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"minor\",\"type\":\"boolean\"},{\"name\":\"length\",\"type\":{\"type\":\"record\",\"name\":\"Length\",\"fields\":[{\"name\":\"old\",\"type\":\"int\"},{\"name\":\"new\",\"type\":\"int\"}]}},{\"name\":\"revision\",\"type\":{\"type\":\"record\",\"name\":\"Revision\",\"fields\":[{\"name\":\"old\",\"type\":\"long\"},{\"name\":\"new\",\"type\":\"long\"}]}},{\"name\":\"server_url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"server_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"server_script_path\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"wiki\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"parsedcomment\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<WikimediaRecentChange> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<WikimediaRecentChange> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<WikimediaRecentChange> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<WikimediaRecentChange> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<WikimediaRecentChange> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this WikimediaRecentChange to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a WikimediaRecentChange from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a WikimediaRecentChange instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static WikimediaRecentChange fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String event;
  private java.util.List<com.litethinking.avro.wikimedia.PartitionOffset> id;
  private com.litethinking.avro.wikimedia.ChangeData data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WikimediaRecentChange() {}

  /**
   * All-args constructor.
   * @param event The new value for event
   * @param id The new value for id
   * @param data The new value for data
   */
  public WikimediaRecentChange(java.lang.String event, java.util.List<com.litethinking.avro.wikimedia.PartitionOffset> id, com.litethinking.avro.wikimedia.ChangeData data) {
    this.event = event;
    this.id = id;
    this.data = data;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return event;
    case 1: return id;
    case 2: return data;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: event = value$ != null ? value$.toString() : null; break;
    case 1: id = (java.util.List<com.litethinking.avro.wikimedia.PartitionOffset>)value$; break;
    case 2: data = (com.litethinking.avro.wikimedia.ChangeData)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'event' field.
   * @return The value of the 'event' field.
   */
  public java.lang.String getEvent() {
    return event;
  }


  /**
   * Sets the value of the 'event' field.
   * @param value the value to set.
   */
  public void setEvent(java.lang.String value) {
    this.event = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.List<com.litethinking.avro.wikimedia.PartitionOffset> getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.List<com.litethinking.avro.wikimedia.PartitionOffset> value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public com.litethinking.avro.wikimedia.ChangeData getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(com.litethinking.avro.wikimedia.ChangeData value) {
    this.data = value;
  }

  /**
   * Creates a new WikimediaRecentChange RecordBuilder.
   * @return A new WikimediaRecentChange RecordBuilder
   */
  public static com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder newBuilder() {
    return new com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder();
  }

  /**
   * Creates a new WikimediaRecentChange RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WikimediaRecentChange RecordBuilder
   */
  public static com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder newBuilder(com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder other) {
    if (other == null) {
      return new com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder();
    } else {
      return new com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder(other);
    }
  }

  /**
   * Creates a new WikimediaRecentChange RecordBuilder by copying an existing WikimediaRecentChange instance.
   * @param other The existing instance to copy.
   * @return A new WikimediaRecentChange RecordBuilder
   */
  public static com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder newBuilder(com.litethinking.avro.wikimedia.WikimediaRecentChange other) {
    if (other == null) {
      return new com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder();
    } else {
      return new com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder(other);
    }
  }

  /**
   * RecordBuilder for WikimediaRecentChange instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WikimediaRecentChange>
    implements org.apache.avro.data.RecordBuilder<WikimediaRecentChange> {

    private java.lang.String event;
    private java.util.List<com.litethinking.avro.wikimedia.PartitionOffset> id;
    private com.litethinking.avro.wikimedia.ChangeData data;
    private com.litethinking.avro.wikimedia.ChangeData.Builder dataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.event)) {
        this.event = data().deepCopy(fields()[0].schema(), other.event);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasDataBuilder()) {
        this.dataBuilder = com.litethinking.avro.wikimedia.ChangeData.newBuilder(other.getDataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing WikimediaRecentChange instance
     * @param other The existing instance to copy.
     */
    private Builder(com.litethinking.avro.wikimedia.WikimediaRecentChange other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.event)) {
        this.event = data().deepCopy(fields()[0].schema(), other.event);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
      this.dataBuilder = null;
    }

    /**
      * Gets the value of the 'event' field.
      * @return The value.
      */
    public java.lang.String getEvent() {
      return event;
    }


    /**
      * Sets the value of the 'event' field.
      * @param value The value of 'event'.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder setEvent(java.lang.String value) {
      validate(fields()[0], value);
      this.event = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'event' field has been set.
      * @return True if the 'event' field has been set, false otherwise.
      */
    public boolean hasEvent() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'event' field.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder clearEvent() {
      event = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.List<com.litethinking.avro.wikimedia.PartitionOffset> getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder setId(java.util.List<com.litethinking.avro.wikimedia.PartitionOffset> value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public com.litethinking.avro.wikimedia.ChangeData getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder setData(com.litethinking.avro.wikimedia.ChangeData value) {
      validate(fields()[2], value);
      this.dataBuilder = null;
      this.data = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'data' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.litethinking.avro.wikimedia.ChangeData.Builder getDataBuilder() {
      if (dataBuilder == null) {
        if (hasData()) {
          setDataBuilder(com.litethinking.avro.wikimedia.ChangeData.newBuilder(data));
        } else {
          setDataBuilder(com.litethinking.avro.wikimedia.ChangeData.newBuilder());
        }
      }
      return dataBuilder;
    }

    /**
     * Sets the Builder instance for the 'data' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder setDataBuilder(com.litethinking.avro.wikimedia.ChangeData.Builder value) {
      clearData();
      dataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'data' field has an active Builder instance
     * @return True if the 'data' field has an active Builder instance
     */
    public boolean hasDataBuilder() {
      return dataBuilder != null;
    }

    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.WikimediaRecentChange.Builder clearData() {
      data = null;
      dataBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public WikimediaRecentChange build() {
      try {
        WikimediaRecentChange record = new WikimediaRecentChange();
        record.event = fieldSetFlags()[0] ? this.event : (java.lang.String) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.util.List<com.litethinking.avro.wikimedia.PartitionOffset>) defaultValue(fields()[1]);
        if (dataBuilder != null) {
          try {
            record.data = this.dataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("data"));
            throw e;
          }
        } else {
          record.data = fieldSetFlags()[2] ? this.data : (com.litethinking.avro.wikimedia.ChangeData) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<WikimediaRecentChange>
    WRITER$ = (org.apache.avro.io.DatumWriter<WikimediaRecentChange>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<WikimediaRecentChange>
    READER$ = (org.apache.avro.io.DatumReader<WikimediaRecentChange>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.event);

    long size0 = this.id.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.litethinking.avro.wikimedia.PartitionOffset e0: this.id) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    this.data.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.event = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<com.litethinking.avro.wikimedia.PartitionOffset> a0 = this.id;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.litethinking.avro.wikimedia.PartitionOffset>((int)size0, SCHEMA$.getField("id").schema());
        this.id = a0;
      } else a0.clear();
      SpecificData.Array<com.litethinking.avro.wikimedia.PartitionOffset> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.litethinking.avro.wikimedia.PartitionOffset>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.litethinking.avro.wikimedia.PartitionOffset e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.litethinking.avro.wikimedia.PartitionOffset();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      if (this.data == null) {
        this.data = new com.litethinking.avro.wikimedia.ChangeData();
      }
      this.data.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.event = in.readString();
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<com.litethinking.avro.wikimedia.PartitionOffset> a0 = this.id;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.litethinking.avro.wikimedia.PartitionOffset>((int)size0, SCHEMA$.getField("id").schema());
            this.id = a0;
          } else a0.clear();
          SpecificData.Array<com.litethinking.avro.wikimedia.PartitionOffset> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.litethinking.avro.wikimedia.PartitionOffset>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.litethinking.avro.wikimedia.PartitionOffset e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.litethinking.avro.wikimedia.PartitionOffset();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 2:
          if (this.data == null) {
            this.data = new com.litethinking.avro.wikimedia.ChangeData();
          }
          this.data.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










