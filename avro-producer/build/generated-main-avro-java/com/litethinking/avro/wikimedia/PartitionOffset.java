/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.litethinking.avro.wikimedia;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PartitionOffset extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6615622635480294736L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PartitionOffset\",\"namespace\":\"com.litethinking.avro.wikimedia\",\"fields\":[{\"name\":\"topic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"partition\",\"type\":\"int\"},{\"name\":\"offset\",\"type\":[\"long\",\"null\"],\"default\":0},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"],\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PartitionOffset> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PartitionOffset> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PartitionOffset> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PartitionOffset> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PartitionOffset> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PartitionOffset to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PartitionOffset from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PartitionOffset instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PartitionOffset fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String topic;
  private int partition;
  private java.lang.Long offset;
  private java.lang.Long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PartitionOffset() {}

  /**
   * All-args constructor.
   * @param topic The new value for topic
   * @param partition The new value for partition
   * @param offset The new value for offset
   * @param timestamp The new value for timestamp
   */
  public PartitionOffset(java.lang.String topic, java.lang.Integer partition, java.lang.Long offset, java.lang.Long timestamp) {
    this.topic = topic;
    this.partition = partition;
    this.offset = offset;
    this.timestamp = timestamp;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return topic;
    case 1: return partition;
    case 2: return offset;
    case 3: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: topic = value$ != null ? value$.toString() : null; break;
    case 1: partition = (java.lang.Integer)value$; break;
    case 2: offset = (java.lang.Long)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'topic' field.
   * @return The value of the 'topic' field.
   */
  public java.lang.String getTopic() {
    return topic;
  }


  /**
   * Sets the value of the 'topic' field.
   * @param value the value to set.
   */
  public void setTopic(java.lang.String value) {
    this.topic = value;
  }

  /**
   * Gets the value of the 'partition' field.
   * @return The value of the 'partition' field.
   */
  public int getPartition() {
    return partition;
  }


  /**
   * Sets the value of the 'partition' field.
   * @param value the value to set.
   */
  public void setPartition(int value) {
    this.partition = value;
  }

  /**
   * Gets the value of the 'offset' field.
   * @return The value of the 'offset' field.
   */
  public java.lang.Long getOffset() {
    return offset;
  }


  /**
   * Sets the value of the 'offset' field.
   * @param value the value to set.
   */
  public void setOffset(java.lang.Long value) {
    this.offset = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new PartitionOffset RecordBuilder.
   * @return A new PartitionOffset RecordBuilder
   */
  public static com.litethinking.avro.wikimedia.PartitionOffset.Builder newBuilder() {
    return new com.litethinking.avro.wikimedia.PartitionOffset.Builder();
  }

  /**
   * Creates a new PartitionOffset RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PartitionOffset RecordBuilder
   */
  public static com.litethinking.avro.wikimedia.PartitionOffset.Builder newBuilder(com.litethinking.avro.wikimedia.PartitionOffset.Builder other) {
    if (other == null) {
      return new com.litethinking.avro.wikimedia.PartitionOffset.Builder();
    } else {
      return new com.litethinking.avro.wikimedia.PartitionOffset.Builder(other);
    }
  }

  /**
   * Creates a new PartitionOffset RecordBuilder by copying an existing PartitionOffset instance.
   * @param other The existing instance to copy.
   * @return A new PartitionOffset RecordBuilder
   */
  public static com.litethinking.avro.wikimedia.PartitionOffset.Builder newBuilder(com.litethinking.avro.wikimedia.PartitionOffset other) {
    if (other == null) {
      return new com.litethinking.avro.wikimedia.PartitionOffset.Builder();
    } else {
      return new com.litethinking.avro.wikimedia.PartitionOffset.Builder(other);
    }
  }

  /**
   * RecordBuilder for PartitionOffset instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PartitionOffset>
    implements org.apache.avro.data.RecordBuilder<PartitionOffset> {

    private java.lang.String topic;
    private int partition;
    private java.lang.Long offset;
    private java.lang.Long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.litethinking.avro.wikimedia.PartitionOffset.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.topic)) {
        this.topic = data().deepCopy(fields()[0].schema(), other.topic);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.partition)) {
        this.partition = data().deepCopy(fields()[1].schema(), other.partition);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.offset)) {
        this.offset = data().deepCopy(fields()[2].schema(), other.offset);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing PartitionOffset instance
     * @param other The existing instance to copy.
     */
    private Builder(com.litethinking.avro.wikimedia.PartitionOffset other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.topic)) {
        this.topic = data().deepCopy(fields()[0].schema(), other.topic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.partition)) {
        this.partition = data().deepCopy(fields()[1].schema(), other.partition);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.offset)) {
        this.offset = data().deepCopy(fields()[2].schema(), other.offset);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'topic' field.
      * @return The value.
      */
    public java.lang.String getTopic() {
      return topic;
    }


    /**
      * Sets the value of the 'topic' field.
      * @param value The value of 'topic'.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.PartitionOffset.Builder setTopic(java.lang.String value) {
      validate(fields()[0], value);
      this.topic = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'topic' field has been set.
      * @return True if the 'topic' field has been set, false otherwise.
      */
    public boolean hasTopic() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'topic' field.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.PartitionOffset.Builder clearTopic() {
      topic = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'partition' field.
      * @return The value.
      */
    public int getPartition() {
      return partition;
    }


    /**
      * Sets the value of the 'partition' field.
      * @param value The value of 'partition'.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.PartitionOffset.Builder setPartition(int value) {
      validate(fields()[1], value);
      this.partition = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'partition' field has been set.
      * @return True if the 'partition' field has been set, false otherwise.
      */
    public boolean hasPartition() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'partition' field.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.PartitionOffset.Builder clearPartition() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'offset' field.
      * @return The value.
      */
    public java.lang.Long getOffset() {
      return offset;
    }


    /**
      * Sets the value of the 'offset' field.
      * @param value The value of 'offset'.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.PartitionOffset.Builder setOffset(java.lang.Long value) {
      validate(fields()[2], value);
      this.offset = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'offset' field has been set.
      * @return True if the 'offset' field has been set, false otherwise.
      */
    public boolean hasOffset() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'offset' field.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.PartitionOffset.Builder clearOffset() {
      offset = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.PartitionOffset.Builder setTimestamp(java.lang.Long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.litethinking.avro.wikimedia.PartitionOffset.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PartitionOffset build() {
      try {
        PartitionOffset record = new PartitionOffset();
        record.topic = fieldSetFlags()[0] ? this.topic : (java.lang.String) defaultValue(fields()[0]);
        record.partition = fieldSetFlags()[1] ? this.partition : (java.lang.Integer) defaultValue(fields()[1]);
        record.offset = fieldSetFlags()[2] ? this.offset : (java.lang.Long) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PartitionOffset>
    WRITER$ = (org.apache.avro.io.DatumWriter<PartitionOffset>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PartitionOffset>
    READER$ = (org.apache.avro.io.DatumReader<PartitionOffset>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.topic);

    out.writeInt(this.partition);

    if (this.offset == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.offset);
    }

    if (this.timestamp == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.timestamp);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.topic = in.readString();

      this.partition = in.readInt();

      if (in.readIndex() != 0) {
        in.readNull();
        this.offset = null;
      } else {
        this.offset = in.readLong();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.timestamp = null;
      } else {
        this.timestamp = in.readLong();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.topic = in.readString();
          break;

        case 1:
          this.partition = in.readInt();
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.offset = null;
          } else {
            this.offset = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.timestamp = null;
          } else {
            this.timestamp = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










